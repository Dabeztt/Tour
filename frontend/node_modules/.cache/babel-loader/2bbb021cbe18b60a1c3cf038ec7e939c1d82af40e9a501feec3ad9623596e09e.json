{"ast":null,"code":"// Define an interface for fee calculation\nclass FeeCalculator {\n  calculate(price) {\n    throw new Error('This method must be overridden!');\n  }\n}\n\n// Concrete implementation of FeeCalculator for service fee\nclass ServiceFeeCalculator extends FeeCalculator {\n  calculate(price) {\n    return price * 0.1; // 10% service fee\n  }\n}\n\n// Concrete implementation of FeeCalculator for insurance fee\nclass InsuranceFeeCalculator extends FeeCalculator {\n  calculate(price) {\n    return price * 0.05; // 5% insurance fee\n  }\n}\n\n// Decorator base class\nclass FeeDecorator extends FeeCalculator {\n  constructor(calculator) {\n    super();\n    this.calculator = calculator;\n  }\n  calculate(price) {\n    return this.calculator.calculate(price);\n  }\n}\n\n// Concrete implementation of FeeDecorator for additional fees (if needed in the future)\nclass AdditionalFeeDecorator extends FeeDecorator {\n  constructor(calculator) {\n    super(calculator);\n  }\n  calculate(price) {\n    // Add additional fee logic here\n    return super.calculate(price); // Delegate calculation to the wrapped calculator\n  }\n}\n\n// Usage\nconst price = 1000; // Example tour price\nconst baseFeeCalculator = new ServiceFeeCalculator();\nconst serviceFee = baseFeeCalculator.calculate(price); // Calculate service fee\n\n// You can also use decorators to add more functionality\nconst serviceAndInsuranceFeeCalculator = new AdditionalFeeDecorator(new InsuranceFeeCalculator());\nconst totalFee = serviceAndInsuranceFeeCalculator.calculate(price); // Calculate total fee\n\nconsole.log(\"Service Fee:\", serviceFee);\nconsole.log(\"Total Fee:\", totalFee);","map":{"version":3,"names":["FeeCalculator","calculate","price","Error","ServiceFeeCalculator","InsuranceFeeCalculator","FeeDecorator","constructor","calculator","AdditionalFeeDecorator","baseFeeCalculator","serviceFee","serviceAndInsuranceFeeCalculator","totalFee","console","log"],"sources":["E:/thieu nang viet code/cnpm/tour-management/frontend/src/Components/Booking/FeeDecorator.js"],"sourcesContent":["// Define an interface for fee calculation\r\nclass FeeCalculator {\r\n    calculate(price) {\r\n        throw new Error('This method must be overridden!');\r\n    }\r\n}\r\n\r\n// Concrete implementation of FeeCalculator for service fee\r\nclass ServiceFeeCalculator extends FeeCalculator {\r\n    calculate(price) {\r\n        return price * 0.1; // 10% service fee\r\n    }\r\n}\r\n\r\n// Concrete implementation of FeeCalculator for insurance fee\r\nclass InsuranceFeeCalculator extends FeeCalculator {\r\n    calculate(price) {\r\n        return price * 0.05; // 5% insurance fee\r\n    }\r\n}\r\n\r\n// Decorator base class\r\nclass FeeDecorator extends FeeCalculator {\r\n    constructor(calculator) {\r\n        super();\r\n        this.calculator = calculator;\r\n    }\r\n\r\n    calculate(price) {\r\n        return this.calculator.calculate(price);\r\n    }\r\n}\r\n\r\n// Concrete implementation of FeeDecorator for additional fees (if needed in the future)\r\nclass AdditionalFeeDecorator extends FeeDecorator {\r\n    constructor(calculator) {\r\n        super(calculator);\r\n    }\r\n\r\n    calculate(price) {\r\n        // Add additional fee logic here\r\n        return super.calculate(price); // Delegate calculation to the wrapped calculator\r\n    }\r\n}\r\n\r\n// Usage\r\nconst price = 1000; // Example tour price\r\nconst baseFeeCalculator = new ServiceFeeCalculator();\r\nconst serviceFee = baseFeeCalculator.calculate(price); // Calculate service fee\r\n\r\n// You can also use decorators to add more functionality\r\nconst serviceAndInsuranceFeeCalculator = new AdditionalFeeDecorator(new InsuranceFeeCalculator());\r\nconst totalFee = serviceAndInsuranceFeeCalculator.calculate(price); // Calculate total fee\r\n\r\nconsole.log(\"Service Fee:\", serviceFee);\r\nconsole.log(\"Total Fee:\", totalFee);\r\n"],"mappings":"AAAA;AACA,MAAMA,aAAa,CAAC;EAChBC,SAAS,CAACC,KAAK,EAAE;IACb,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;EACtD;AACJ;;AAEA;AACA,MAAMC,oBAAoB,SAASJ,aAAa,CAAC;EAC7CC,SAAS,CAACC,KAAK,EAAE;IACb,OAAOA,KAAK,GAAG,GAAG,CAAC,CAAC;EACxB;AACJ;;AAEA;AACA,MAAMG,sBAAsB,SAASL,aAAa,CAAC;EAC/CC,SAAS,CAACC,KAAK,EAAE;IACb,OAAOA,KAAK,GAAG,IAAI,CAAC,CAAC;EACzB;AACJ;;AAEA;AACA,MAAMI,YAAY,SAASN,aAAa,CAAC;EACrCO,WAAW,CAACC,UAAU,EAAE;IACpB,KAAK,EAAE;IACP,IAAI,CAACA,UAAU,GAAGA,UAAU;EAChC;EAEAP,SAAS,CAACC,KAAK,EAAE;IACb,OAAO,IAAI,CAACM,UAAU,CAACP,SAAS,CAACC,KAAK,CAAC;EAC3C;AACJ;;AAEA;AACA,MAAMO,sBAAsB,SAASH,YAAY,CAAC;EAC9CC,WAAW,CAACC,UAAU,EAAE;IACpB,KAAK,CAACA,UAAU,CAAC;EACrB;EAEAP,SAAS,CAACC,KAAK,EAAE;IACb;IACA,OAAO,KAAK,CAACD,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC;EACnC;AACJ;;AAEA;AACA,MAAMA,KAAK,GAAG,IAAI,CAAC,CAAC;AACpB,MAAMQ,iBAAiB,GAAG,IAAIN,oBAAoB,EAAE;AACpD,MAAMO,UAAU,GAAGD,iBAAiB,CAACT,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC;;AAEvD;AACA,MAAMU,gCAAgC,GAAG,IAAIH,sBAAsB,CAAC,IAAIJ,sBAAsB,EAAE,CAAC;AACjG,MAAMQ,QAAQ,GAAGD,gCAAgC,CAACX,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC;;AAEpEY,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEJ,UAAU,CAAC;AACvCG,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,QAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}